// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏• express
import express from "express";
import connectionPool from "./utils/db.mjs";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô express
const app = express();

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
const port = 4001;

app.use(express.json());

app.get("/test", (req, res) => {
  return res.json("Server API is working üöÄ");
});

app.post("/assignments", async (req, res) => {
  // ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  // 1) Access ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Body ‡∏à‡∏≤‡∏Å Request ‡∏î‡πâ‡∏ß‡∏¢ req.body
  const newAssignment = {
    ...req.body,
    created_at: new Date(),
    updated_at: new Date(),
    published_at: new Date(),
  };
  console.log(req.body);

  if (
    !newAssignment.title ||
    !newAssignment.content ||
    !newAssignment.category
  ) {
    return res.status(400).json({
      message:
        "Server could not create assignment because there are missing data from client",
    });
  }

  // 2) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå ‡∏î‡πâ‡∏ß‡∏¢ Connection Pool
  try {
    await connectionPool.query(
      ` insert into assignments (title, content, category, length, user_id, status, created_at, updated_at, published_at )
    values($1, $2, $3, $4, $5, $6, $7, $8, $9)`,
      [
        newPost.title,
        newAssignment.content,
        newAssignment.category,
        newAssignment.length,
        1,
        newAssignment.status,
        newAssignment.created_at,
        newAssignment.updated_at,
        newAssignment.published_at,
      ]
    );
  } catch {
    return res.status(500).json({
      message: "Server could not create assignment because database connection",
    });
  }

  // 3) Return ‡∏ï‡∏±‡∏ß Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Client ‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  return res.status(201).json({
    message: "Created assignment sucessfully",
  });
});

app.get("/assignments", async (req, res) => {
  // ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö

  // 1) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå ‡∏î‡πâ‡∏ß‡∏¢ Connection Pool
  let results;
  try {
    results = await connectionPool.query(`select * from assignments`);
  } catch {
    return res.status(500).json({
      message: "Server could not read assignment because database connection",
    });
  }

  // 2) Return ‡∏ï‡∏±‡∏ß Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Client
  return res.status(200).json({
    data: results.rows,
  });
});

app.get("/assignments/:assignmentId", async (req, res) => {
  // ‡∏•‡∏≠‡∏Ñ‡πÉ‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ Id ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
  // 1) Access ‡∏ï‡∏±‡∏ß Endpoint Parameter ‡∏î‡πâ‡∏ß‡∏¢ req.params
  const assignmentIdFromClient = req.params.assignmentId;

  // 2) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå ‡∏î‡πâ‡∏ß‡∏¢ Connection Pool

  let result;
  try {
    result = await connectionPool.query(
      `select * from assignments where assignment_id=$1`,
      [assignmentIdFromClient]
    );
  } catch {
    return res.status(500).json({
      message: "Server could not read assignment because database connection",
    });
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Conditional logic ‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ false (null / undefined)
  // ‡∏Å‡πá‡πÉ‡∏´‡πâ Return response ‡∏î‡πâ‡∏ß‡∏¢ status code 404
  // ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ "Server could not find a requested post (post id: x)"
  if (!results.rows[0]) {
    return res.status(404).json({
      message: `Server could not find a requested assignment (assignment id: ${assignmentIdFromClient})`,
    });
  }

  // 3) Return ‡∏ï‡∏±‡∏ß Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Client
  return res.status(200).json({
    data: results.rows[0],
  });
});

app.put("/assignments/:assignmentId", async (req, res) => {
  // ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ Id ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö

  // 1) Access ‡∏ï‡∏±‡∏ß Endpoint Parameter ‡∏î‡πâ‡∏ß‡∏¢ req.params
  // ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà Client ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å Body ‡∏Ç‡∏≠‡∏á Request
  const assignmentIdFromClient = req.params.assignmentId;
  const updatedAssignment = { ...req.body, updated_at: new Date() };

  // 2) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå ‡∏î‡πâ‡∏ß‡∏¢ Connection Pool

  let result;
  try {
    result = await connectionPool.query(
      `
    update assignments
    set title = $2,
        content = $3,
        category = $4
    where assignment_id = $1
    returning *
    `,
      [
        assignmentIdFromClient,
        updateAssignment.title,
        updateAssignment.content,
        updateAssignment.category,
      ]
    );

    if (!result.rows[0]) {
      return res.status(404).json({
        message: "Assignment not found",
      });
    }
    // 3) Return ‡∏ï‡∏±‡∏ß Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Client
    return res.status(200).json({
      message: "Updated assignment sucessfully",
    });
  } catch {
    return res.status(500).json({
      message: "Server could not update assignment because database connection",
    });
  }
});

app.delete("/assignments/:assignmentId", async (req, res) => {
  // ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ Id ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö

  // 1) Access ‡∏ï‡∏±‡∏ß Endpoint Parameter ‡∏î‡πâ‡∏ß‡∏¢ req.params
  const assignmentIdFromClient = req.params.assignmentId;

  // 2) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå ‡∏î‡πâ‡∏ß‡∏¢ Connection Pool

  let result;
  try {
    result = await connectionPool.query(
      `
    delete from assignments where assignment_id = $1 returning *
    `,
      [assignmentIdFromClient]
    );
  } catch {
    return res.status(500).json({
      message: "Server could not delete assignment because database connection",
    });
  }
  if (!result.rows[0]) {
    return res.status(404).json({
      message: `Server could not find a requested assignment to delete ( assignment id: ${assignmentIdFromClient})`,
    });
  }
  // 3) Return ‡∏ï‡∏±‡∏ß Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Client
  return res.status(200).json({
    message: "Deleted assignment successfully",
  });
});

app.listen(port, () => {
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô console
  console.log(`Server is running at ${port}`);
});
